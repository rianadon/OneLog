plugins {
  id "com.ullink.msbuild" version "2.18"
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'

sourceSets {
    main {
        java { srcDir 'src' }
        resources { srcDir 'resources' }
    }
    test {
        java { srcDir 'test' }
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    // jcenter()
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile 'com.moandjiezana.toml:toml4j:0.7.2'
    compile 'org.json:json:20180130'

    compile 'com.jcraft:jsch:0.1.54'
}

def slnName = 'OneLog'
def jniPath = 'jni/x64/Release'
def jniHeader = "jni/$slnName/${slnName}.h"
applicationDefaultJvmArgs = ["-Djava.library.path=$jniPath"]
mainClassName = 'onelog.Main'
targetCompatibility = '1.8'

msbuild {
    solutionFile = "jni/${slnName}.sln"
    configuration = 'Release'
}

task generateJniHeaders(type:Exec) {
    inputs.files sourceSets.main.runtimeClasspath
    outputs.file jniHeader

    def classpath = sourceSets.main.runtimeClasspath.asPath
    commandLine 'javah', '-o', jniHeader, '-classpath', classpath, 'onelog.BackgroundProcess'

    dependsOn classes
}

msbuild.dependsOn generateJniHeaders
msbuild.inputs.files fileTree("jni/$slnName") {
    include '*.cpp'
    include '*.h'
}
msbuild.outputs.file "$jniPath/${slnName}.dll"

compileJava.finalizedBy msbuild

eclipse.classpath.file.whenMerged {
    def container = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
    container.accessRules << new org.gradle.plugins.ide.eclipse.model.AccessRule("accessible", "javafx/**")
}
