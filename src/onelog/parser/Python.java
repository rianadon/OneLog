package onelog.parser;

import java.io.BufferedReader;
import java.io.FileReader;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.ConsoleHandler;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Parses log files generated by Python in the format "%(asctime)s - %(name)s - %(levelname)s -
 * %(message)s"
 */
public class Python extends Parser {

    private static final Pattern LINE_PARSER = Pattern.compile(
        "^(?:\\x00)*(?<time>.+?) - (?<class>.+?) - (?<level>.+?) - (?<message>.*)");
    private static final Map<String, Level> LEVELS = new HashMap<>();
    private static final int READAHEAD_LIMIT = 10000;
    private static DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss,SSS");

    static {
        LEVELS.put("ERROR", Level.SEVERE);
        LEVELS.put("WARNING", Level.WARNING);
        LEVELS.put("INFO", Level.INFO);
        LEVELS.put("DEBUG", Level.FINE);
        LEVELS.put("NOTSET", Level.FINER);
    }

    private BufferedReader reader;

    public Python(Path file) throws Exception {
        super(file);
        reader = new BufferedReader(new FileReader(file.toString()));
    }

    public LogRecord nextRecord() throws Exception {
        String line = reader.readLine();
        if (line == null) return null;

        Matcher match = LINE_PARSER.matcher(line);
        if (!match.matches()) throw new RuntimeException("Log does not begin with proper format");

        System.out.println(match.group("time"));

        String message = match.group("message");
        reader.mark(READAHEAD_LIMIT);
        line = reader.readLine();
        while (line != null && !LINE_PARSER.matcher(line).matches()) {
            reader.mark(READAHEAD_LIMIT);
            message += "\n" + line;
            line = reader.readLine();
        }
        reader.reset();

        LogRecord record = new LogRecord(
            LEVELS.get(match.group("level")),
            message
        );

        record.setSourceClassName(match.group("class"));

        long time = formatter.parse(match.group("time")).toInstant().toEpochMilli();
        record.setMillis(time);

        return record;
    }

}
